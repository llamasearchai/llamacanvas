[build-system]
name = "hatchling"
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "llama-canvas"
version = "0.2.0"
description = "Advanced AI-driven multi-modal generation platform with Claude API integration"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "LlamaSearch.AI Team", email = "team@llamasearch.ai"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Video",
]
dependencies = [
    "numpy>=1.22.0",
    "pillow>=9.0.0",
    "requests>=2.28.0",
    "tqdm>=4.64.0",
    "typer>=0.7.0",
    "pydantic>=1.10.0",
]

[project.optional-dependencies]
api = [
    "fastapi>=0.95.0",
    "uvicorn>=0.21.0",
    "python-multipart>=0.0.6",
]
claude = [
    "anthropic>=0.5.0",
]
diffusion = [
    "diffusers>=0.18.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
]
video = [
    "moviepy>=1.0.3",
    "opencv-python>=4.7.0.72",
]
dev = [
    "pytest>=7.3.1",
    "pytest-cov>=4.1.0",
    "black>=23.3.0",
    "isort>=5.12.0",
    "mypy>=1.3.0",
    "flake8>=6.0.0",
    "pre-commit>=3.3.2",
]
docs = [
    "mkdocs>=1.4.3",
    "mkdocs-material>=9.1.11",
    "mkdocstrings>=0.22.0",
    "mkdocstrings-python>=1.1.2",
]
full = [
    "llama-canvas[api,claude,diffusion,video,dev,docs]",
]

[project.urls]
"Homepage" = "https://github.com/llamasearch/llamacanvas"
"Bug Tracker" = "https://github.com/llamasearch/llamacanvas/issues"
"Documentation" = "https://llama-canvas.readthedocs.io/"

[project.scripts]
llama-canvas = "llama_canvas.cli:app"

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"

[tool.coverage.run]
source = ["llama_canvas"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
] 